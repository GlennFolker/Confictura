pluginManagement{
    repositories{
        gradlePluginPortal()
        maven{url 'https://jitpack.io'}
    }
}

if(JavaVersion.current().ordinal() < JavaVersion.VERSION_17.ordinal()){
    throw new GradleException("JDK 17 is a required minimum version. Yours: ${System.getProperty('java.version')}")
}

rootProject.name = modArtifact
include ':proc'

for(def local : ['glTFrenzy', 'EntityAnno']){
    def prop = "local.${local.toLowerCase()}"
    if(!hasProperty(prop) || Boolean.valueOf(getProperty(prop) as String)){
        def dir = new File(rootDir.parent, local)
        if(dir.exists()){
            final def name = local

            logger.log(LogLevel.LIFECYCLE, "Compiling with local `$local`.")
            includeBuild(dir){
                dependencySubstitution{sub ->
                    sub.all{
                        if(it.requested instanceof ModuleComponentSelector){
                            def req = it.requested as ModuleComponentSelector
                            if(Boolean.valueOf(mindustryBE) && req.group == 'com.github.Anuken.Mindustry'){
                                useTarget "com.github.Anuken.MindustryJitpack:$req.module:$mindustryBEVersion"
                            }else if(req.group == 'com.github.Anuken.Arc'){
                                useTarget "com.github.Anuken.Arc:$req.module:$arcVersion"
                            }else if(req.group.startsWith('com.github.GlennFolker')){
                                def group = req.group.substring('com.github.GlennFolker'.length())
                                if(group.isEmpty() && req.module == name){
                                    useTarget sub.project(':')
                                }else if(!group.isEmpty() && group.substring(1) == name){
                                    if(req.module.endsWith('.gradle.plugin')){
                                        useTarget sub.project(':')
                                    }else{
                                        useTarget sub.project(":$req.module")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
